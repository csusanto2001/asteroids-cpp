// Class automatically generated by Dev-C++ New Class wizard

#include "ship.h" // class's header file

#include "engine.h"

#include <cmath>
#include <graphics.h>
#include <iostream>

// class constructor
Ship::Ship()
{
	reset();
}

// class destructor
Ship::~Ship()
{
	// insert your code here
}

void Ship::reset()
{
     // Set all variables to default position
     position = Point2D(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2);
     speed = Point2D();
     rotation = 0;
     
     exploded = false;
     explosionTime = 0;
}

void Ship::applyLeftRotation(double delta)
{
     rotation -= delta * ROTATION_SPEED;
}

void Ship::applyRightRotation(double delta)
{
     rotation += delta * ROTATION_SPEED;
}

void Ship::applyAcceleration(double delta)
{
     // Apply acceleration, then set it to the max if exceeding
     speed += Point2D(sin(rotation), -cos(rotation)) * SHIP_ACCEL * delta;     
     speed.x = clamp(speed.x, -MAX_SPEED, MAX_SPEED);
     speed.y = clamp(speed.y, -MAX_SPEED, MAX_SPEED);
}

void Ship::advance(double delta)
{
     // Move ship. Wrap ship around if it goes outside the screen
     position += speed * delta;
     if (position.x < -10) position.x = WINDOW_WIDTH + 10;
     if (position.x > WINDOW_WIDTH + 10) position.x = -10;
     if (position.y < -10) position.y = WINDOW_HEIGHT + 10;
     if (position.y > WINDOW_WIDTH + 10) position.y = -10;
     
     // Increment explosion timer if exploded
     if (exploded) explosionTime += delta;
}

void Ship::explode()
{
     exploded = true;
     explosionTime = 0;
}

void Ship::draw()
{
     if (!exploded)
     {
         Point2D head = Point2D(position.x + 15 * sin(rotation), 
             position.y - 15 * cos(rotation));
         // For the rotation to be normal it needs to be multiplied
         // by 10?????
         Point2D left = Point2D(position.x + 15 * sin(rotation + 10 * M_2_PI / 3),
             position.y - 15 * cos(rotation + 10 * M_2_PI / 3));
         Point2D right = Point2D(position.x + 15 * sin(rotation - 10 * M_2_PI / 3),
             position.y - 15 * cos(rotation - 10 * M_2_PI / 3));
         
         setcolor(GREEN);
         line((int)head.x, (int)head.y, (int)left.x, (int)left.y);
         line((int)left.x, (int)left.y, (int)position.x, (int)position.y);
         line((int)position.x, (int)position.y, (int)right.x, (int)right.y);
         line((int)right.x, (int)right.y, (int)head.x, (int)head.y);
         setcolor(WHITE);
     }
     
     else
     {
         const int PARTICLE_NO = 10;
         // Draw 9 points
         double angleStep = M_2_PI / PARTICLE_NO;
         for (int i = 0; i < PARTICLE_NO; i++)
         {
             circle((int)(position.x + (explosionTime * 150) * sin(i * angleStep * 10)),
                     (int)(position.y - (explosionTime * 150) * cos(i * angleStep * 10)),
                     4);
         }
     }
}

Point2D Ship::getPosition()
{
    return position;
}

double Ship::getRotation()
{
    return rotation;
}

bool Ship::isExploded()
{
    return exploded;
}

double Ship::getExplosionTime()
{
    return explosionTime;
}

